package DAO;

import Model.Message;
import Util.ConnectionUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MessageDAO {

    /**
     * TODO: Retrieve all Messages from the Message table.
     *
     * You only need to change the sql String and set preparedStatement parameters.
     *
     * @return all Messages.
     */
    public List<Message> getAllMessages(){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> Messages = new ArrayList<>();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM Message";

            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();
            /*while(rs.next()){
                Message Message = new Message(rs.getInt("Message_id"), rs.getString("departure_city"),
                        rs.getString("arrival_city"));
                Messages.add(Message);
            }*/
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return Messages;
    }

    /**
     * TODO: Retrieve a specific Message using its Message ID.
     *
     * You only need to change the sql String and set preparedStatement parameters.
     *
     * Remember that the format of a select where statement written as a Java String looks something like this:
     * String sql = "select * from TableName where ColumnName = ?";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from zero) and the second argument identifies the value to be used:
     * preparedStatement.setInt(1,int1);
     *
     * @param id a Message ID.
     */
    public Message getMessageById(int id){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM Message where Message_id = ?";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write preparedStatement's setString and setInt methods here.
            preparedStatement.setInt(1,id);

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                /*Message Message = new Message(rs.getInt("Message_id"), rs.getString("departure_city"),
                        rs.getString("arrival_city"));
                return Message;*/
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * TODO: Add a Message record into the database which matches the values contained in the Message object.
     * You can use the getters already written in the Message class to retrieve its values (getDeparture_city(),
     * getArrival_city()). The Message_id will be automatically generated by the SQL database, and JDBC will be able
     * to retrieve the generated ID automatically. That means that you when you insert the Message, you only need
     * to define the departure_city and arrival_city values (two columns total!)
     *
     * You only need to change the sql String and set preparedStatement parameters.
     *
     * Remember that the format of a insert PreparedStatement written as a string works something like this:
     * String sql = "insert into TableName (ColumnName1, ColumnName2) values (?, ?);";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from zero) and the second argument identifies the value to be used:
     * preparedStatement.setString(1,string1);
     * preparedStatement.setString(2,string2);
     *
     * @param Message an object modelling a Message. the Message object does not contain a Message ID.
     */
    public Message insertMessage(Message Message){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Write SQL logic here. When inserting, you only need to define the departure_city and arrival_city
            //values (two columns total!)
            String sql = "INSERT INTO Message (departure_city, arrival_city) VALUES (?, ?);" ;
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            //write preparedStatement's setString and setInt methods here.
            /*preparedStatement.setString(1,Message.departure_city);
            preparedStatement.setString(2,Message.arrival_city);*/

            preparedStatement.executeUpdate();
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            /*if(pkeyResultSet.next()){
                int generated_Message_id = (int) pkeyResultSet.getLong(1);
                return new Message(generated_Message_id, Message.getDeparture_city(), Message.getArrival_city());
            }*/
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * TODO: Update the Message identified by the Message id to the values contained in the Message object.
     *
     * You only need to change the sql String and set preparedStatement parameters.
     *
     * Remember that the format of an update PreparedStatement written as a Java String looks something like this:
     * String sql = "update TableName set ColumnName1=?, ColumnName2=? where ColumnName3 = ?;";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from zero) and the second argument identifies the value to be used:
     * preparedStatement.setString(1,string1);
     * preparedStatement.setString(2,string2);
     * preparedStatement.setInt(3,int1);
     *
     * @param id a Message ID.
     * @param Message a Message object. the Message object does not contain a Message ID.
     */
    public void updateMessage(int id, Message Message){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Write SQL logic here
            String sql = "UPDATE Message SET departure_city=?, arrival_city=? where Message_id = ?;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write PreparedStatement setString and setInt methods here.
            /*preparedStatement.setString(1,Message.departure_city);
            preparedStatement.setString(2,Message.arrival_city);
            preparedStatement.setInt(3,id);*/


            preparedStatement.executeUpdate();
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
    }

    /**
     * TODO: Retrieve all Messages following a particular Message path.
     *
     * you only need to change the sql string and set preparedStatement parameters.
     *
     * Remember that the format of a select where statement written as a Java String looks something like this:
     * "select * from TableName where ColumnName1 = ? and ColumnName2 = ?;";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from zero) and the second argument identifies the value to be used:
     * preparedStatement.setString(1,"column 1 value");
     * preparedStatement.setString(2,"column 2 value");
     *
     * @param departure_city the departing city.
     * @param arrival_city the arriving city.
     * @return all Messages from departure_city to arrival_city.
     */
    public List<Message> getAllMessagesFromCityToCity(String departure_city, String arrival_city){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> Messages = new ArrayList<>();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM Message WHERE departure_city = ? and arrival_city = ?;";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write PreparedStatement setString and setInt methods here.
            preparedStatement.setString(1,departure_city);
            preparedStatement.setString(2,arrival_city);


            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                /*Message Message = new Message(rs.getInt("Message_id"), rs.getString("departure_city"),
                        rs.getString("arrival_city"));
                Messages.add(Message);*/
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return Messages;
    }
}